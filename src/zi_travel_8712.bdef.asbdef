managed;
//strict ( 2 );

define behavior for ZI_TRAVEL_8712 alias Travel
implementation in class zbp_i_travel_8712 unique
persistent table ztb_travel_8712a
    with additional save

lock master
authorization master ( instance )
etag master LocalLastChangedAt
{
  //Administrative field: read only
  field ( numbering : managed, readonly ) TravelUuid;
  field ( readonly ) LastChangedAt, LocalLastChangedBy, LocalCreatedBy, LocalCreatedAt;
  field ( mandatory : create ) TravelId, AgencyId, TravelStatus, BookingFee, CurrencyCode;
  field ( features : instance ) TravelId, TravelStatus;
  create;
  update;
  delete;

  //Validaciones
  validation validateCustomer on save { create; field CustomerId; }
  validation validateDates on save { create; field BeginDate, EndDate; }
  validation validateStatus on save { create; field TravelStatus; }

  //Actions
  action ( features : instance ) acceptTravel result [1] $self;
  action ( features : instance ) rejectTravel result [1] $self;
  action createTravelByTemplate result [1] $self;

  association _Booking { create ( features : instance ); }
  mapping for ztb_travel_8712a
    {
      TravelUuid         = travel_uuid;
      TravelId           = travel_id;
      AgencyId           = agency_id;
      CustomerId         = customer_id;
      BeginDate          = begin_date;
      EndDate            = end_date;
      BookingFee         = booking_fee;
      TotalPrice         = total_price;
      CurrencyCode       = currency_code;
      Description        = description;
      TravelStatus       = overall_status;
      LocalCreatedBy     = local_created_by;
      LocalCreatedAt     = local_created_at;
      LocalLastChangedBy = local_last_changed_by;
      LocalLastChangedAt = local_last_changed_at;
      LastChangedAt      = last_changed_at;
    }
}

define behavior for ZI_BOOKING_8712 alias Booking
implementation in class zbp_i_booking_8712 unique
persistent table ztb_booking_8712
lock dependent by _Travel
authorization dependent by _Travel
etag master LocalLastChangedAt
//unmanaged saveed saveged save master <field_name>
{
  //Administrative  field: read only
  field ( numbering : managed, readonly ) BookingUuid;
  field ( readonly ) ParentUuid;
  field ( mandatory : create ) BookingId, CarrierId, ConnectionId, FlightDate, BookingStatus;
  //field(mandatory)
  update;
  delete;
  validation    validateStatus on save { create; field BookingStatus; }

  determination calculateTotalFlightPrice on modify
                { field FlightPrice, CurrencyCode;  }

  determination calculateTotalSupplimPrice on modify { field CurrencyCode; }

  association _Travel;
  association _BookingSupplement { create ( features : instance ); }

  mapping for ztb_booking_8712
    {
      BookingUuid        = booking_uuid;
      ParentUuid         = parent_uuid;
      BookingId          = booking_id;
      BookingDate        = booking_date;
      CustomerId         = customer_id;
      CarrierId          = carrier_id;
      ConnectionId       = connection_id;
      FlightDate         = flight_date;
      FlightPrice        = flight_price;
      CurrencyCode       = currency_code;
      BookingStatus      = booking_status;
      LocalLastChangedAt = local_last_changed_at;
    }
}

define behavior for ZI_BOOKSUPPL_8712 alias Supplement
implementation in class zbp_i_booksuppl_8712 unique
//persistent table ztb_booksul_8712
with unmanaged save
lock dependent by _Travel
authorization dependent by _Travel
etag master LocalLastChangedAt
{
  //Administrative field: read only
  field ( numbering : managed, readonly ) BooksupplUuid;
  field ( readonly ) RootUuid, ParentUuid;
  field ( mandatory: create ) SupplementId, Price;
  update;
  delete;
  determination calculateTotalSupplimPrice on modify { field Price, CurrencyCode; }
  association _Travel;
  association _Booking;
  mapping for ztb_booksul_8712
    {
      BooksupplUuid       = booksuppl_uuid;
      ParentUuid          = parent_uuid;
      RootUuid            = root_uuid;
      BookingSupplementId = booking_supplement_id;
      SupplementId        = supplement_id;
      Price               = price;
      CurrencyCode        = currency_code;
      LocalLastChangedAt  = local_last_changed_at;
    }
}